{
  "openapi": "3.1.0",
  "info": {
    "title": "VizAPI.ai API",
    "description": "API for extracting structured data from images and documents",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.vizapi.ai/v1"
    }
  ],
  "security": [
    {
      "apiKeyHeader": []
    }
  ],
  "paths": {
    "/templates/{template_id}": {
      "get": {
        "summary": "Get Template By Id",
        "description": "Retrieves a template by its ID",
        "parameters": [
          {
            "name": "template_id",
            "in": "path",
            "description": "ID of the template to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Specific version of the template to retrieve. If not specified, the latest version will be returned.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "Get User Templates",
        "description": "Retrieves all private templates belonging to the authenticated user",
        "responses": {
          "200": {
            "description": "Templates retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agents/suggest-fields": {
      "post": {
        "summary": "Suggest fields for a document",
        "description": "Analyzes a document and suggests fields for extraction",
        "requestBody": {
          "description": "Input for field suggestion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SuggestFieldsInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Fields suggested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuggestFieldsOutput"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agents/extract-values": {
      "post": {
        "summary": "Extract values from a document",
        "description": "Extracts values from a document using a template",
        "requestBody": {
          "description": "Input for value extraction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractValuesInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Values extracted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtractValuesOutput"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "402": {
            "description": "Payment Required - Insufficient credits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Access denied to template",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Template not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check the health status of the API",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "healthy"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "API is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the template",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The name of the template"
          },
          "description": {
            "type": "string",
            "description": "The description of the template"
          },
          "category": {
            "type": "string",
            "description": "The category of the template"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags associated with the template",
            "nullable": true
          },
          "usage_count": {
            "type": "integer",
            "description": "The number of times this template has been used",
            "nullable": true,
            "default": 0
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateField"
            },
            "description": "Field definitions for the template",
            "nullable": true
          },
          "is_public": {
            "type": "boolean",
            "description": "Whether the template is public or private",
            "nullable": true,
            "default": false
          },
          "user_id": {
            "type": "string",
            "description": "The ID of the user who owns this template",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the template was created",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the template was last updated",
            "nullable": true
          }
        },
        "required": ["name", "description", "category"]
      },
      "SuggestFieldsInput": {
        "type": "object",
        "properties": {
          "image_url": {
            "type": "string",
            "description": "URL of the image or document to analyze. Can also be a base64-encoded image data URL (format: data:image/jpeg;base64,...)"
          },
          "text_description": {
            "type": "string",
            "description": "Text description of the data to extract"
          },
          "with_metadata": {
            "type": "boolean",
            "description": "Whether to include metadata generation (title, description, category, tags) in addition to fields",
            "default": false
          }
        },
        "anyOf": [
          { "required": ["image_url"] },
          { "required": ["text_description"] }
        ]
      },
      "TemplateMetadata": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "A descriptive title for the extraction template"
          },
          "description": {
            "type": "string",
            "description": "A detailed description of what this template extracts"
          },
          "category": {
            "type": "string",
            "description": "The category this template belongs to (e.g., 'Agricultural', 'Medical', 'Industrial', etc.)"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of relevant tags for this template"
          }
        },
        "required": ["title", "description", "category", "tags"]
      },
      "SuggestFieldsOutput": {
        "type": "object",
        "properties": {
          "template_name": {
            "type": "string",
            "description": "Suggested name for the template"
          },
          "template": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateField"
            },
            "description": "Suggested fields for extraction"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TemplateMetadata"
              }
            ],
            "description": "Template metadata including title, description, category, and tags (only when with_metadata is True)",
            "nullable": true
          }
        },
        "required": ["template_name", "template"]
      },
      "ExtractValuesInput": {
        "type": "object",
        "properties": {
          "template_id": {
            "type": "string",
            "description": "ID of an existing template to use for extraction"
          },
          "version_number": {
            "type": "integer",
            "description": "Optional version number of the template to use. If not provided or set to 0, the latest version will be used.",
            "nullable": true
          },
          "image_url": {
            "type": "string",
            "description": "URL of the image or document to extract data from. Can also be a base64-encoded image data URL (format: data:image/jpeg;base64,...)"
          },
          "advanced": {
            "type": "object",
            "properties": {
              "target_language": {
                "type": "string",
                "description": "Optional target language for the extraction results. If provided, values will be extracted in this language."
              }
            },
            "description": "Advanced options for extraction"
          }
        },
        "required": ["image_url"]
      },
      "ExtractValuesOutput": {
        "type": "object",
        "properties": {
          "extracted_template_values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtractedField"
            },
            "description": "Fields with extracted values"
          }
        },
        "required": ["extracted_template_values"]
      },
      "TemplateField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field"
          },
          "description": {
            "type": "string",
            "description": "A description of the field",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The data type of the field",
            "enum": ["string", "number", "boolean", "object", "enum", "date", "image"],
            "nullable": true
          },
          "subfields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemplateField"
            },
            "description": "Nested fields for complex data structures",
            "nullable": true
          },
          "return_as_list": {
            "type": "boolean",
            "description": "Whether the field should be returned as a list",
            "nullable": true
          },
          "enum_values": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Possible values for enum fields",
            "nullable": true
          },
          "include_extraction_output": {
            "type": "boolean",
            "description": "For image fields: whether to include other extracted field values as context for image generation",
            "nullable": true
          },
          "enable_reference_image": {
            "type": "boolean",
            "description": "For image fields: whether reference image upload is enabled",
            "nullable": true
          },
          "reference_image_url": {
            "type": "string",
            "description": "For image fields: URL of the reference image to guide generation",
            "nullable": true
          }
        },
        "required": ["name"]
      },
      "ExtractedField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the field"
          },
          "type": {
            "type": "string",
            "description": "The data type of the field",
            "enum": ["string", "number", "boolean", "object", "enum", "date", "image"],
            "nullable": true
          },
          "return_as_list": {
            "type": "boolean",
            "description": "Whether the field is returned as a list",
            "nullable": true
          },
          "subfields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtractedField"
            },
            "description": "Nested fields for complex data structures",
            "nullable": true
          },
          "value": {
            "description": "The extracted value for the field. Can be a string, list, or dictionary depending on the field type and return_as_list flag. For image fields, this will be the URL of the generated image.",
            "nullable": true
          },
          "error": {
            "type": "string",
            "description": "Error message if field processing failed (especially relevant for image generation)",
            "nullable": true
          }
        },
        "required": ["name"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "error_code"
              },
              "message": {
                "type": "string",
                "example": "Error message description"
              }
            }
          }
        },
        "required": ["success", "error"]
      }
    },
    "securitySchemes": {
      "apiKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}